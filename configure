#!/bin/bash
# Automatic make file configuration script
# Released under the MIT License
# Copyright (c) 2017 Michael Lazear

# Project information
SOURCE_DIR=src
INCLUDE_DIR=include
BUILD_DIR=build
OUTPUT=Makefile
PROJECT=$(basename "$PWD")
PREFIX=/usr/local/bin

# Build machine and compiler information
CC=$(which cc)
CMACHINE=$(cc -dumpmachine)
CVERSION=$(cc -dumpversion)
CFLAGS="-O2 -Wall -Werror -Wextra"
ARCH=$(uname -m)
OS=$(uname -s)
STDC_VERSION=""

# Configuration information
CONFIG_DIR=.config
CONFIG_HEADER=$INCLUDE_DIR/configure.h

check_header() {
	printf "Checking for $1... "
	cat << ENDHEADER > $CONFIG_DIR/header.c 
#include "$1"
int main(void) {
	return 0;
}
ENDHEADER
$CC -Wall -Wextra -Werror $CONFIG_DIR/header.c 2> /dev/null
if [ $? -eq 0 ]; then
		echo "success"
		name=$(echo $1 | sed 's/\.h//g')
		echo "#define CONFIGURE_${name^^}" 1 >> $CONFIG_HEADER
		rm ./a.out
	else
		echo "fail"
		echo "#define CONFIGURE_${name^^}" 0 >> $CONFIG_HEADER
fi

}

check_function() {
	printf "Checking for function $2 in $1... "
	cat << ENDHEADER > $CONFIG_DIR/function.c 
#include "$1"
int main(void) {
	$2(${@:3});
	return 0;
}
ENDHEADER
$CC -Wall -Wextra -Werror $CONFIG_DIR/function.c 2> /dev/null

if [ $? -eq 0 ]; then
		echo "success"
		echo "#define CONFIGURE_${2^^} 1" >> $CONFIG_HEADER
		rm ./a.out	
	else
		echo "fail"
		echo "#define CONFIGURE_${2^^} 0" >> $CONFIG_HEADER
fi

}

# Determine what version of standard C library we support
check_stdc() {
printf "Checking which version of the C standard compiler supports... "
cat << END_STDC > $CONFIG_DIR/version.c
#include "stdio.h"
int main(int argc, char** argv) {
	printf("%ld", __STDC_VERSION__);
	return 0;
}
END_STDC
$CC $CONFIG_DIR/version.c 2> /dev/null
if [ $? -eq 0 ]; then
		STDC_VERSION=$(./a.out)
		echo $STDC_VERSION
		rm ./a.out
	else
		echo "__STDC_VERSION__ not defined"
fi
}

# Create a makefile
create_makefile() {
cat << EOF > $OUTPUT
#!/usr/bin/make
# Makefile automatically generated using $0 $@ 
# $(date +"%F")

# Build machine specs
export MACHINE  = $CMACHINE
export ARCH     = $ARCH

# C compiler information
export CC       = $CC
export CCVER    = $CVERSION
export STDC_VER = $STDC_VERSION
export CFLAGS   = $CFLAGS

# Project information
export PREFIX   = $PREFIX
export PROJECT  = $PROJECT
export VERSION  = 0.1.0

EOF
cat << 'EOF' >> $OUTPUT
# Build information
export SRC_DIR  = src
export INC_DIR  = include
export BUILD    = build
export HEADERS  = $(wildcard $(INC_DIR)/*.h)
export SOURCE   = $(wildcard $(SRC_DIR)/*.c)
export OBJECTS  = $(SOURCE:.c=.o)
export TARGET   = $(BUILD)/$(PROJECT)

.PHONY: all clean dist

all: $(TARGET)

clean:
	rm -rf $(OBJECTS)

dist: clean
	@echo "creating distribution archive $(PROJECT)-$(VERSION).tar.gz"
	@tar -cvf $(PROJECT)-$(VERSION).tar.gz configure $(TARGET) $(SOURCE) $(HEADERS)

install: $(TARGET)
	@echo "installing $(PROJECT) in $(PREFIX)"
	@cp $(TARGET) $(PREFIX)/$(PROJECT)-$(VERSION)
	@ln $(PREFIX)/$(PROJECT)-$(VERSION) $(PREFIX)/$(PROJECT) 


%.o: %.c
	@echo "cc $<"
	@$(CC) $(CFLAGS) -c $< -o $@

$(TARGET): $(OBJECTS) $(HEADERS)
	@echo "building $(TARGET)"
	@$(CC) $(CFLAGS) $(OBJECTS) -o $(TARGET)
EOF
}

create_accessories() {

if [ ! -f README.md ]; then
cat << ENDREADME > README.md 
# $PROJECT-0.1.0

### Building
\`\`\`
./configure
make
make install
\`\`\`

### License
See LICENSE file
ENDREADME
fi
if [ ! -f LICENSE ]; then
cat << ENDLICENSE > LICENSE
MIT License

Copyright (c) $(date +"%Y") $(whoami)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
ENDLICENSE
fi
if [ ! -f .gitignore ]; then	
cat << ENDIGNORE > .gitignore
*.o
*.a
.config
ENDIGNORE
fi
}

clean() {
	rm -rf $CONFIG_DIR
	rm -rf $OUTPUT
	rm -rf $BUILD_DIR
}

TEMP=`getopt -o hp --long help,clean,prefix:,cc:,cflags: -n 'configure' -- "$@"`

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-h|--help)
			echo "$0"
			echo "--clean:    clean up configuration files and build directory"
			echo "--prefix=:  set install location"
			echo "--cc=:      set C compiler"
			echo "--cflags=:  set C compiler flags"
			echo "--help:     display this text"
			exit 0;;
		--clean) 
			clean
			exit 0;;
		-p|--prefix) 
			PREFIX="$2";
			shift 2 ;;
		--cc) 
			CC="$2";
			shift 2;;
		--cflags)
			CFLAGS="$2";
			shift 2;;
		--)  
			shift;
			break ;;
		*) 
			echo "$0 error: unknown argument!" ; 
			exit 1 ;;
	esac
done


mkdir -p $CONFIG_DIR
mkdir -p $SOURCE_DIR
mkdir -p $INCLUDE_DIR
mkdir -p $BUILD_DIR

if [ ! $(which $CC) ]; then
	echo "$0 error: C compiler not found"
	exit 1;
fi

# Begin dependency/header check 


cat << ECONFIG > $CONFIG_HEADER
/* This file was automatically generated by $0 */
#ifndef _CONFIGURE_H_
#define _CONFIGURE_H_

#define CONFIGURE_NAME      "$PROJECT"
#define CONFIGURE_VERSION   "0.1.0"
#define CONFIGURE_ARCH      "$ARCH"
ECONFIG

check_stdc
create_makefile
create_accessories

check_header "stdio.h"
check_header "stddef.h"
check_header "stdint.h"
check_header "stdlib.h"

printf "\n#endif" >> $CONFIG_HEADER